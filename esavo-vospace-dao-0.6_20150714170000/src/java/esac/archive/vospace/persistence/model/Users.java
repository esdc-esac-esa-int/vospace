package esac.archive.vospace.persistence.model;
// Generated Mar 29, 2014 6:27:54 PM by Hibernate Tools 3.3.0.GA


import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.SEQUENCE;

import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name="users"
    ,schema="vos"
    , uniqueConstraints = {@UniqueConstraint(columnNames="name"), @UniqueConstraint(columnNames={"name", "full_name", "mail"})} 
)
public class Users  implements java.io.Serializable {


     private Integer userOid;
     private String name;
     private String fullName;
     private String mail;
     private Date creationDate;
     private Long quota;
     private Long qLimit;
     
     private Set<Node> nodes = new HashSet<Node>(0); //owners
          
     private Set<Groups> shareGroups = new HashSet<Groups>(0); //manages the following groups
     
     //private Set<UserNodeProperty> shareNodes = new HashSet<UserNodeProperty>(0); //nodes shared with this user
     
     private Set<Groups> groups = new HashSet<Groups>(); //member of
     

    public Users() {
    }

	
    public Users(String name, String fullName, String mail, Date creationDate) {
        this.name = name;
        this.fullName = fullName;
        this.mail = mail;
        this.creationDate = creationDate;
    }
    /*public Users(String name, String fullName, String mail, Date creationDate, BigDecimal quota, Set<Node> nodes, Set<UserGroup> userGroups, Set<ShareUser> shareUsers, Set<Groups> groupses) {
       this.name = name;
       this.fullName = fullName;
       this.mail = mail;
       this.creationDate = creationDate;
       this.quota = quota;
       this.nodes = nodes;
       this.userGroups = userGroups;
       this.shareUsers = shareUsers;
       this.groupses = groupses;
    }*/
   
     
    
    @SequenceGenerator(name="generator", sequenceName="user_user_oid_seq")
    @Id 
    @GeneratedValue(strategy=SEQUENCE, generator="generator")
    @Column(name="user_oid", unique=true, nullable=false)
    public Integer getUserOid() {
        return this.userOid;
    }
    
    public void setUserOid(Integer userOid) {
        this.userOid = userOid;
    }

    
    @Column(name="name", unique=true, nullable=false)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    
    @Column(name="full_name", nullable=false)
    public String getFullName() {
        return this.fullName;
    }
    
    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    
    @Column(name="mail", nullable=false)
    public String getMail() {
        return this.mail;
    }
    
    public void setMail(String mail) {
        this.mail = mail;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="creation_date", nullable=false, length=29)
    public Date getCreationDate() {
        return this.creationDate;
    }
    
    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }

    
    @Column(name="quota")
    public Long getQuota() {
        return this.quota;
    }
    
    public void setQuota(Long quota) {
        this.quota = quota;
    }
    
    /*
     * Customize user quota limit.
     */
    
    @Column(name="qlimit")
    public Long getQLimit() {
        return this.qLimit;
    }
    
    public void setQLimit(Long qLimit) {
        this.qLimit = qLimit;
    }

    @OneToMany(fetch=FetchType.LAZY, mappedBy="users")
    public Set<Node> getNodes() {
        return this.nodes;
    }
    
    public void setNodes(Set<Node> nodes) {
        this.nodes = nodes;
    }

    /*@OneToMany(fetch=FetchType.LAZY, mappedBy="users")
    public Set<UserGroup> getUserGroups() {
        return this.userGroups;
    }
    
    public void setUserGroups(Set<UserGroup> userGroups) {
        this.userGroups = userGroups;
    }*/

    /*@OneToMany(fetch=FetchType.LAZY, mappedBy="users")
    public Set<ShareUser> getShareUsers() {
        return this.shareUsers;
    }
    
    public void setShareUsers(Set<ShareUser> shareUsers) {
        this.shareUsers = shareUsers;
    }*/
    
    

    @OneToMany(fetch=FetchType.LAZY, mappedBy="manager")
    public Set<Groups> getShareGroup() {
        return this.shareGroups;
    }
    
    public void setShareGroup(Set<Groups> groupses) {
        this.shareGroups = groupses;
    }


    /**
     * @return the nodesAndRoles
     *//*
    @ManyToMany  // Bidirectional association.
    @MapKeyManyToMany(joinColumns=@JoinColumn(name="node_id")) //deprecated
    @JoinTable(name="share_user", schema = "vos",
               joinColumns=@JoinColumn(name="user_id"),
               inverseJoinColumns=@JoinColumn(name="role_id"))
    @MapKeyJoinColumn(name="node_id")
    public Map<Node, Role> getNodesAndRoles() {
        return nodesAndRoles;
    }


    *//**
     * @param nodesAndRoles the nodesAndRoles to set
     *//*
    public void setNodesAndRoles(Map<Node, Role> nodesAndRoles) {
        this.nodesAndRoles = nodesAndRoles;
    }*/
    
    /*@ManyToMany(fetch=FetchType.LAZY, mappedBy="users")
    public Set<UserNodeProperty> getShareNodes() {
        return this.shareNodes;
    }
    
    public void setShareNodes(Set<UserNodeProperty> shareNodes) {
        this.shareNodes = shareNodes;
    }*/


    /**
     * @return the groupsAndRoles
     *//*
    @ManyToMany  // Bidirectional association.
    @MapKeyManyToMany(joinColumns=@JoinColumn(name="node_id")) //deprecated
    @JoinTable(name="user_group", schema = "vos",
               joinColumns=@JoinColumn(name="user_id"),
               inverseJoinColumns=@JoinColumn(name="role_id"))
    @MapKeyJoinColumn(name="group_id")
    public Map<Groups, Role> getGroupsAndRoles() {
        return groupsAndRoles;
    }


    *//**
     * @param groupsAndRoles the groupsAndRoles to set
     *//*
    public void setGroupsAndRoles(Map<Groups, Role> groupsAndRoles) {
        this.groupsAndRoles = groupsAndRoles;
    }*/

    @ManyToMany(fetch=FetchType.LAZY, mappedBy="members")
    public Set<Groups> getGroups() {
        return groups;
    }
    
    public Set<Groups> setGroups(Set<Groups> groupSet) {
        return groups = groupSet;
    }
}


