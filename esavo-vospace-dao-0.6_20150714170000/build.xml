<?xml version="1.0" encoding="UTF-8"?>

<!--
 build.xml
 esavo-vospace-dao - Data Access Objects
 Copyright (C) 2008  ESA - ESAC - Madrid, Spain
-->

<project basedir="." default="dist" name="esavo-vospace-dao">

    <description>
    	ESAVO VOSpace Data Access Objects
    </description>

    <property file="build.properties" />
    <property file="build.properties.defaults" />
    <import file="ivy-tasks.xml" />

    <path id="subant.path">
    </path>

    <fileset id="lib.fileset" dir="${lib.dir}" />

    <path id="build.path">
        <fileset refid="lib.fileset" />
    </path>

    <path id="test.path">
        <pathelement location="${build.classes.dir}" />
        <path refid="build.path" />
    </path>

    <target name="all" depends="dist, docs, check" description="Build, pack, test, document and check the application" />

    <!--=============================================================================-->
    <!--                                TARGET 'clean'                               -->
    <!--=============================================================================-->

    <target name="clean" depends="ivy-clean-jars, ivy-clean-cache" description="Clean up the environment">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${final.dir}" />
        <delete dir="${logs.dir}" />
    </target>

    <!--=============================================================================-->
    <!--                                TARGET 'init'                                -->
    <!--=============================================================================-->

    <target name="init" depends="clean, ivy-retrieve" description="Initialise the environment">
        <tstamp />
        <mkdir dir="${build.dir}" />
        <mkdir dir="${logs.dir}" />
        <mkdir dir="${dist.dir}" />
    </target>

    <!--=============================================================================-->
    <!--                                TARGET 'build'                               -->
    <!--=============================================================================-->

    <target name="build" depends="init,-build-code,-replace-properties,-update-sonar-projectVersion" description="Compile the java sources">
    </target>

    <target name="-build-code">
        <mkdir dir="${build.classes.dir}" />

        <input message="[${software.name}] On which target do you want to deploy today ? " 
            addproperty="deploy.target" validargs="local,dev,beta,oper" defaultvalue="local" />
        <property file="build.properties.${deploy.target}" />
        <subant buildpathref="subant.path" target="build" failonerror="true">
            <property name="deploy.target" value="${deploy.target}" />
        </subant>

        <javac srcdir="${java.dir}" destdir="${build.classes.dir}" classpathref="build.path" source="${javac.source}" target="${javac.target}" compiler="${javac.compiler}" nowarn="${javac.nowarn}" debug="${javac.debug}" deprecation="${javac.deprec}" />

        <echo>Copying all files from conf folder...</echo>
        <copy todir="${build.classes.dir}">
            <fileset dir="${conf.dir}" includes="**/*" />
        </copy>
    </target>

    <!--=============================================================================-->
    <!--                                TARGET 'dist'                                -->
    <!--=============================================================================-->

    <target name="dist" depends="build" description="Make the distribution files (pack as JAR, WAR, EAR, ...)">
        <mkdir dir="${dist.dir}" />
        <jar destfile="${dist.dir}/${software.name}-${software.version}.${deploy.target}.jar" basedir="${build.classes.dir}" manifest="${conf.manifest.file}" compress="${jar.compress}" index="${jar.index}" update="${jar.update}" filesetmanifest="merge">
        </jar>
    </target>

    <target name="final" depends="dist" description="Make the final distribution group of files">
        <subant buildpathref="subant.path" target="final" failonerror="true">
            <property name="deploy.target" value="${deploy.target}" />
        </subant>
        <!--=============================================================================-->
        <!--                                TARGET 'final'                               -->
        <!--=============================================================================-->
        <mkdir dir="${final.dir}" />
        <copy todir="${final.dir}" verbose="true" overwrite="true">
            <fileset dir="${dist.dir}" />
            <fileset dir="${lib.dir}">
                <exclude name="junit*" />
                <exclude name="checkstyle*" />
            </fileset>
        </copy>
    </target>

    <!-- ================================================================= -->
    <!-- Target: -replace-properties				                       -->
    <!-- Replaces tokens in project files								   -->
    <!-- ================================================================= -->

    <target name="-replace-properties">

        <!-- If no build.properties file found, look for db details in environment variables...-->
        <property environment="env" />
        <condition property="final.db.pwd" value="${env.VOSPACE_DB_VALUE}" else="${db.pwd}">
            <equals arg1="${db.pwd}" arg2="xxx" />
        </condition>
        <condition property="final.db.user" value="${env.VOSPACE_DB_USER}" else="${db.user}">
            <equals arg1="${db.user}" arg2="xxx" />
        </condition>

        <echo>Replace tokens in ${persistence.spring.file}</echo>
        <replace file="${persistence.spring.file}" summary="true">
            <replacefilter token="@dbUrlToken@" value="${db.url}" />
            <replacefilter token="@dbUsrToken@" value="${final.db.user}" />
            <replacefilter token="@dbPwdToken@" value="${final.db.pwd}" />
        </replace>

        <echo>Replace tokens in ${log4j.configuration.file}</echo>
        <replace file="${log4j.configuration.file}" summary="true">
            <replacefilter token="@logs.dir@" value="${logs.dir}" />
        </replace>

    </target>

    <target name="deploy" depends="dist" description="Deploy the application">
        <!--  TODO  -->
    </target>

    <!--=============================================================================-->
    <!--                                TARGET 'test'                                -->
    <!--=============================================================================-->

	<target name="test" depends="build" description="Run the unit tests (using JUnit or other specific tests)">
        <mkdir dir="${build.testclass.dir}" />
        <mkdir dir="${build.jureport.dir}" />
        <javac srcdir="src/java/test" destdir="${build.testclass.dir}" classpathref="test.path" />

        <junit fork="true" printsummary="${junit.summary}" showoutput="${junit.output}">
            <classpath>
                <path refid="test.path" />
                <pathelement location="${build.testclass.dir}" />
            </classpath>
            <batchtest todir="${build.jureport.dir}" haltonfailure="${junit.halt}">
                <fileset dir="${build.testclass.dir}">
                    <include name="**/**DaoTest.class" />
                </fileset>
            </batchtest>
            <formatter type="xml" />
        </junit>

        <junitreport todir="${build.jureport.dir}">
            <fileset dir="${build.jureport.dir}" includes="TEST-*.xml" />
            <report todir="${build.jureport.dir}" />
        </junitreport>
    </target>

    <!--=============================================================================-->
    <!--                                TARGET 'docs'                                -->
    <!--=============================================================================-->


    <target name="docs" depends="init" description="Generate the API javadoc (and other documentation files)">
        <mkdir dir="${build.javadoc.dir}" />

        <javadoc sourcepath="${java.dir}" destdir="${build.javadoc.dir}" source="${javac.source}" packagenames="${javadoc.packages}" access="${javadoc.access}" failonerror="${javadoc.fail}">
            <classpath refid="build.path" />
            <link href="http://java.sun.com/j2se/1.4.2/docs/api/" />
        </javadoc>
    </target>

    <!--=============================================================================-->
    <!--                                TARGET 'check'                               -->
    <!--=============================================================================-->

    <target name="check" depends="build" description="Check the sources for style violations (and report them)">
        <mkdir dir="${build.csreport.dir}" />
        <taskdef resource="checkstyletask.properties" classpath="${lib.checkstyle.jar}" />

        <checkstyle config="${checkstyle.config}" failonviolation="${checkstyle.fail}">
            <classpath>
                <path refid="build.path" />
                <pathelement location="${build.classes.dir}" />
            </classpath>
            <fileset dir="${java.dir}" includes="**/*.java" />
            <formatter type="xml" tofile="${build.csreport.dir}/csreport.xml" />
        </checkstyle>

        <xslt basedir="${build.csreport.dir}" includes="*.xml" destdir="${build.csreport.dir}" style="${checkstyle.style}">
            <param name="output.dir" expression="${build.csreport.dir}" />
            <param name="source.dir" expression="${basedir}/${java.dir}/" />
        </xslt>
    </target>

    <!--=============================================================================-->
    <!--               TARGET '-update-sonar-projectVersion'                         -->
    <!--=============================================================================-->

    <target name="-update-sonar-projectVersion" depends="init" description="Update value of sonar.projectVersion property in sonar properties file">
        <echo>Extract version number from Ivy file</echo>
        <loadfile srcfile="ivy.xml" property="ivy.revision">
            <filterchain>
                <linecontains>
                    <contains value="revision=&quot;" />
                </linecontains>
                <tokenfilter>
                    <replacestring from="revision=&quot;" to="&quot;" />
                </tokenfilter>
            </filterchain>
        </loadfile>
        <echo message="${ivy.revision}" />

        <echo>Replace version in sonar configuration file</echo>
        <replaceregexp file="sonar-project.properties" match="sonar.projectVersion=(.)*" replace="sonar.projectVersion=${ivy.revision}">
        </replaceregexp>
    </target>

</project>
