<?xml version="1.0" encoding="UTF-8"?>

<!--
 build.xml

 vospace-server  -  VOSpace 2.0 Service
 Copyright (C) 2013-  ESA - ESAC - Madrid, Spain
-->

<project name="vospace-sl-server" default="dist" xmlns:cl="antlib:net.jtools.classloadertask" basedir=".">

  <description>
    vospace-sl-service
    </description>

  <!-- Jera Ant task for encoding passwords -->
  <taskdef name="query" classpath="setup/antlibs/JeraAntTasks.jar" classname="com.jera.anttasks.Query" />

  <!-- Included for autocontent deploy -->
  <typedef uri="antlib:net.jtools.classloadertask" resource="net/jtools/classloadertask/antlib.xml">
    <classpath>
      <fileset dir="setup/antlibs/" includes="ant-classloadertask.jar" />
    </classpath>
  </typedef>

  <cl:classloader loader="project">
    <classpath>
      <fileset dir="setup/antlibs" includes="jsch.jar" />
    </classpath>
  </cl:classloader>

  <property file="build.properties" />
  <property file="build.properties.defaults" />
  <import file="ivy-tasks.xml" />

  <path id="subant.path">
  </path>

  <fileset id="lib.fileset" dir="${lib.dir}">
    <include name="*.jar" />
  </fileset>

  <path id="build.path">
    <fileset refid="lib.fileset" />
  </path>

  <path id="test.path">
    <pathelement location="${build.classes.dir}" />
    <path refid="build.path" />
  </path>

  <target name="all" depends="final, test, docs, check" description="Build, pack, test, document and check the application" />

  <target name="clean" depends="ivy-clean-jars,ivy-clean-cache" description="Clean up the environment">
    <delete dir="${build.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="${final.dir}" />
    <delete dir="${logs.dir}" />
  </target>

  <target name="init" depends="ivy-retrieve" description="Initialise the environment">
    <tstamp />
    <mkdir dir="${build.dir}" />
  </target>

  <target name="build" depends="init, -update-sonar-projectVersion" description="Compile the java sources">
    <mkdir dir="${build.classes.dir}" />

    <input message="On which target do you want to deploy today ? " addproperty="deploy.target" validargs="local,int,dev,oper" defaultvalue="local" />
    <property file="build.properties.${deploy.target}" />
    <subant buildpathref="subant.path" target="build" failonerror="true">
      <property name="deploy.target" value="${deploy.target}" />
    </subant>
    
    <javac srcdir="${java.dir}" destdir="${build.classes.dir}" 
            classpathref="build.path" source="${javac.source}" 
            target="${javac.target}" compiler="${javac.compiler}" 
            nowarn="${javac.nowarn}" debug="${javac.debug}" deprecation="${javac.deprec}" />

        <echo>Copying properties files...</echo>    
        <copy todir="${build.classes.dir}" overwrite="true" verbose="true" includeemptydirs="true">
            <fileset dir="${conf.dir}">
	            <exclude name="MANIFEST.MF"/>
	            <exclude name="web.xml"/>
	            <exclude name="log4j.properties"/>
	            <exclude name="applicationContext-security-cas-rest-imp-var.xml"/>
            </fileset>
        </copy>
        
        <echo>Copying properties files...</echo>
        <copy file="${log4j.properties.file}" todir="${build.classes.dir}" />
        <copy file="${server.properties.file}" todir="${build.classes.dir}" />
        <replace file="${build.classes.dir}/log4j.properties">
            <replacefilter token="@logFile" value="${software.name}-${software.version}" />
        </replace>
        
        <echo>Replace tokens in vospace.properties configuration file</echo>
        <replace file="${build.classes.dir}/vospace.properties">
            <replacefilter token="@fileSystemPath" value="${vospace.file.system}" />
            <replacefilter token="@serviceClientFileToken" value="${service.client.file}" />
            <replacefilter token="@servicePrefixToken" value="${vospace.prefix}" />
            <replacefilter token="@serverUrl" value="${server.url}" />
        	<replacefilter token="@downloadPath" value="${vospace.download}" />
        </replace>
  </target>

  <target name="dist" depends="build" description="Make the distribution files (pack as JAR, WAR, EAR, ...)">
    <mkdir dir="${dist.dir}" />
    <subant buildpathref="subant.path" target="dist" failonerror="true">
      <property name="deploy.target" value="${deploy.target}" />
    </subant>
    
        <mkdir dir="${subst.dir}" />
        <copy todir="${subst.dir}" verbose="true" overwrite="true">
            <fileset dir="${conf.dir}">
                <exclude name="web.xml"/>
                <exclude name="MANIFEST.MF"/>
                <exclude name="appengine-web.xml"/>
                <exclude name="log4j.properties"/>
                <exclude name="logging.properties"/>
                <exclude name="vospace.properties"/>
            </fileset>
        </copy>
        
        <!-- update web.xml -->
        <copy file="${conf.dir}/web.xml" todir="${subst.dir}" />
        <replace file="${subst.dir}/web.xml">            
            <replacefilter token="@ldap.server@" value="${ldap.server}" />
            <replacefilter token="@ldap.usr@" value="${ldap.usr}" />
            <replacefilter token="@ldap.pwd@" value="${ldap.pwd}" />
            <replacefilter token="@cas.server.url@" value="${cas.server.url}" />
            <replacefilter token="@cas.service.url@" value="${cas.service.url}" />
            
            <!-- UWS parameters -->
            <replacefilter token="@app.id@" value="${app.id}" />
            <replacefilter token="@uws.restart.pending_jobs@" value="${uws.restart.pending_jobs}" />
            <replacefilter token="@uws.app.storage_dir@" value="${uws.app.storage_dir}" />
            <replacefilter token="@uws.max_running_jobs@" value="${uws.max_running_jobs}" />
            <replacefilter token="@uws.db.usage@" value="${uws.db.usage}" />
            <replacefilter token="@uws.db.quota@" value="${uws.db.quota}" />
            <replacefilter token="@uws.files.quota@" value="${uws.files.quota}" />
            <replacefilter token="@uws.exec_duration_limit@" value="${uws.exec_duration_limit}" />
            <replacefilter token="@uws.upload.enabled@" value="${uws.upload.enabled}" />
            <replacefilter token="@uws.upload.max_size@" value="${uws.upload.max_size}" />
            <replacefilter token="@uws.fixed_base_url@" value="${uws.fixed_base_url}" />
            <replacefilter token="@uws.jobs_removal_check_time@" value="${uws.jobs_removal_check_time}" />
            <replacefilter token="@uws.jobs_delta_destruction_time@" value="${uws.jobs_delta_destruction_time}" />
            <replacefilter token="@uws.old_empty_dirs_cmp_time@" value="${uws.old_empty_dirs_cmp_time}" />
            <replacefilter token="@uws.events_removal_check_time@" value="${uws.events_removal_check_time}" />
            <replacefilter token="@uws.events_delta_destruction_time@" value="${uws.events_delta_destruction_time}" />
            <replacefilter token="@uws.notifications_removal_check_time@" value="${uws.notifications_removal_check_time}" />
            <replacefilter token="@uws.notifications_delta_destruction_time@" value="${uws.notifications_delta_destruction_time}" />
            <replacefilter token="@uws.ldap.server@" value="${uws.ldap.server}" />
            <replacefilter token="@uws.ldap.usr@" value="${uws.ldap.usr}" />
            <replacefilter token="@uws.ldap.pwd@" value="${ldap.pwd}" />
            <replacefilter token="@uws.ldap.search_base@" value="${uws.ldap.search_base}" />
            
            
            <replacefilter token="@db.server@" value="${db.server}" />
            <replacefilter token="@db.port@" value="${db.port}" />
            <replacefilter token="@db.name@" value="${db.name}" />
            <replacefilter token="@db.owner@" value="${db.owner}" />
            <replacefilter token="@db.pwd@" value="${db.pwd}" />
        </replace>
        
        <!-- Update ldap+CAS file -->
        <replace file="${subst.dir}/applicationContext-security-cas-rest-imp-var.xml">
            <replacefilter token="@ldap.server@" value="${ldap.server}" />
            <replacefilter token="@ldap.usr@" value="${ldap.usr}" />
            <replacefilter token="@ldap.pwd@" value="${ldap.pwd}" />
            <replacefilter token="@cas.service.url@" value="${cas.service.url}" />
            <replacefilter token="@cas.server.url@" value="${cas.server.url}" />
        </replace>
    

	    <war destfile="${dist.war.file}" 
	        webxml="${subst.dir}/web.xml" 
	        manifest="${conf.manifest.file}" compress="${war.compress}" 
	        update="${war.update}">
            
        <classes dir="${build.classes.dir}"/>
      
	      <lib dir="${lib.dir}">
	        <exclude name="junit*" />
	        <exclude name="checkstyle*" />
	        <exclude name="servlet-api*" />
	        <exclude name="catalina*" />
	        <exclude name="jetty*" />
	        <exclude name="servlet-api-2.5.jar" />
	      </lib>
	      <webinf dir="${subst.dir}" includes="*" />
    </war>
  </target>
  

  <target name="final" depends="dist" description="Make the final distribution group of files">
    <mkdir dir="${final.dir}" />
    <subant buildpathref="subant.path" target="final" failonerror="true">
      <property name="deploy.target" value="${deploy.target}" />
    </subant>

    <!-- <war destfile="${final.war.file}" basedir="${war.basedir}" webxml="${build.webxml.file}" manifest="${conf.manifest.file}" compress="${war.compress}" update="${war.update}">
      <classes dir="${build.classes.dir}"/>
      <webinf dir="${build.classes.dir}"/>
      <lib dir="${lib.dir}">
        <exclude name="junit*" />
        <exclude name="checkstyle*" />
        <exclude name="servlet-api*" />
        <exclude name="catalina*" />
        <exclude name="jetty*" />   
      </lib>
    </war> -->
    
    <copy todir="${final.dir}" >
            <fileset dir="${dist.dir}" excludes="servlet-api-2.5.jar"/>
        </copy>

  </target> 

  <target name="deploy" depends="clean, final" description="Deploy the application">
    <echo message="Identify deploy machine's password..." />
    <query name="server.password" message="Please enter password for ${server.user}@${server.host}" password="true" />

    <echo message="Copy war ball to deployment machine and directory..." />
    <scp file="${final.war.file}" todir="${server.user}:${server.password}@${server.host}:${server.instdir}" trust="true" verbose="true" />

  </target>

  <target name="undeploy" depends="init" description="Undeploy the application">
    <input message="Which target do you want to undeploy today ? " addproperty="deploy.target" validargs="local,int,dev,oper" />
    <property file="build.properties.${deploy.target}" />
    <!--  TODO  -->
  </target>

  <target name="redeploy" depends="init" description="Redeploy the application">
    <input message="Which target do you want to redeploy today ? " addproperty="deploy.target" validargs="local,int,dev,oper" />

    <antcall target="undeploy" />
    <antcall target="deploy" />
  </target>

  <target name="test" depends="final" description="Run the unit tests (using JUnit or other specific tests)">
    <mkdir dir="${build.testclass.dir}" />
    <mkdir dir="${build.jureport.dir}" />
    <javac srcdir="test" destdir="${build.testclass.dir}" classpathref="test.path" />
    <echo>Copying additional test files...</echo>
    <copy todir="${build.testclass.dir}">
      <fileset dir="test" includes="*.svg" />
    </copy>

    <junit printsummary="${junit.summary}" showoutput="${junit.output}">
      <classpath>
        <pathelement location="${build.testclass.dir}" />
        <path refid="test.path" />
      </classpath>
      <batchtest todir="${build.jureport.dir}" haltonfailure="${junit.halt}">
        <fileset dir="${build.testclass.dir}" excludes="**/AbstractServletTest.class" includes="**/Metadata*Test.class" />
      </batchtest>
      <formatter type="xml" />
    </junit>

    <junitreport todir="${build.jureport.dir}">
      <fileset dir="${build.jureport.dir}" includes="TEST-*.xml" />
      <report todir="${build.jureport.dir}" />
    </junitreport>
  </target>

  <target name="docs" depends="init" description="Generate the API javadoc (and other documentation files)">
    <mkdir dir="${build.javadoc.dir}" />

    <javadoc sourcepath="${java.dir}" destdir="${build.javadoc.dir}" source="${javac.source}" packagenames="${javadoc.packages}" access="${javadoc.access}" failonerror="${javadoc.fail}">
      <classpath refid="build.path" />
      <link href="http://java.sun.com/j2se/1.4.2/docs/api/" />
    </javadoc>
  </target>

  <target name="check" depends="build" description="Check the sources for style violations (and report them)">
    <mkdir dir="${build.csreport.dir}" />
    <taskdef resource="checkstyletask.properties" classpath="${lib.checkstyle.jar}" />

    <checkstyle config="${checkstyle.config}" failonviolation="${checkstyle.fail}">
      <classpath>
        <path refid="build.path" />
        <pathelement location="${build.classes.dir}" />
      </classpath>
      <fileset dir="${java.dir}" includes="**/*.java" />
      <formatter type="xml" tofile="${build.csreport.dir}/csreport.xml" />
    </checkstyle>

    <xslt basedir="${build.csreport.dir}" includes="*.xml" destdir="${build.csreport.dir}" style="${checkstyle.style}">
      <param name="output.dir" expression="${build.csreport.dir}" />
      <param name="source.dir" expression="${basedir}/${java.dir}/" />
    </xslt>
  </target>
  
  <!--=============================================================================-->
        <!--               TARGET '-update-sonar-projectVersion'                         -->
        <!--=============================================================================-->

        <target name="-update-sonar-projectVersion" depends="init"
         description="Update value of sonar.projectVersion property in sonar properties file">
          <echo>Extract version number from Ivy file</echo>
          <loadfile srcfile="ivy.xml" property="ivy.revision">
             <filterchain>
                <linecontains>
                   <contains value="revision=&quot;" />
                </linecontains>
                <tokenfilter>
                   <replacestring from="revision=&quot;" to="&quot;" />
                </tokenfilter>
             </filterchain>
          </loadfile>
          <echo message="${ivy.revision}" />
          <echo>Replace version in sonar configuration file</echo>
          <replaceregexp file="sonar-project.properties" match="sonar.projectVersion=(.)*"
               replace="sonar.projectVersion=${ivy.revision}">
          </replaceregexp>
       </target> 
</project>